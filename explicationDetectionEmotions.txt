Bonjour, j'espère que vous allez bien !
Aujourd'hui, je partage un modèle CNN simple pour la détection des émotions.
Notez qu'il n'est pas encore 100% précis et nécessite plus d'entraînement.

c quoi CNN ?  
Un réseau neuronal convolutif (CNN) imite les neurones humains pour analyser des données structurées comme des images.

****les caractéristiques *********

- couche de convolution : : Extraction de caractéristiques avec des filtres
(nb filtres,kernel_size, strides (optionel) ,padding(optionel ) ,activation(optionel),input_kernel)

-classification binaire : sigmoid (val entre 0 et 1) , tanh  (entre -1 et 1 ) 
les couches cachés des neurones : on a Relu , Relu Leaky et Elu  
dans cet tp on a utilisée Relu (couche caché des neurones)
-softmax :multiclass

-BatchNormalization : Normaliser les activations pour stabiliser l'entraînement.

-pooling : 2 types: maxpooling ,averagePooling : reduire la dimension cartes caractéristique extraite
tout en conservant l'esssentiel 

-Dense : Prédictions finales avec Softmax pour classification multiclass.
dense (nb neurone , activation ) 
( softmax  car elle est classification multiclass( joie ,tristesse,surprise,etc)  )

-régularisation (drop out ,l2 regularization ) : pour éviter le surrapprentissage 
Dropout : Réduire le surapprentissage en désactivant certains neurones de manière aléatoire.

-flatten :transformer multiDimension en un seul vecteur 

- optimisation : adam plus famous 

-loss function : mesure l'écart entre les prédictions du modèle et la vérité réelle
3 types :
Binary Cross-Entropy : Utilisée pour les tâches de classification binaire.
Categorical Cross-Entropy : Utilisée pour la classification multiclass(notre cas ).
Mean Squared Error (MSE) : Utilisée pour les tâches de régression.

*****************bibliothéques **************************
import os :Gérer les chemins et fichiers sur le systèm
OpenCV: Traitement d'images.
 Keras pour construire le modèle.
NumPy: Calculs numériques et manipulation de matrices.

from keras.utils import to_categorical :Convertir les étiquettes (labels) en format one-hot encoding[0 1].

 from tensorflow.keras.preprocessing.image import ImageDataGenerator :Générer et augmenter des ensembles de données d'images.

from keras.callbacks import ReduceLROnPlateau, EarlyStopping

callbacks=[reduce_lr, early_stopping]

reduce_lr : Réduit le taux d'apprentissage si l'amélioration du modèle stagne.
EarlyStopping : Arrêter l'entraînement automatiquement si le modèle ne s'améliore plus.
epochs : itérations


from sklearn.metrics import classification_report : Évaluer les performances du modèle après l'entraînement.
************
load 
np.array(images) : Convertit la liste d'images en tableau NumPy .
np.array(labels) : Convertit les labels en tableau NumPy.

***************
train_images = np.expand_dims(train_images, axis=-1)
test_images = np.expand_dims(test_images, axis=-1)
modéle CNN attendent généralement des données 
en 3 dimensions pour chaque image 


***************************
j'espére que vous avez trouver ça utile , le code est fournit avec des commentaires pour mieux explications 
********************************************
pour connfiguration env j'ai utiliser anaconda 
conda create --name detection python=3.10 (la version 12 et 13 n'est pas stable et certains biblio ne fonctionne pas avec eux .donc j'ai choisi 3.10 ou 3.9 comme tu veux )
conda activate detection 
pour installer les biblio tu peux utiliser pip install ou conda install 

***************************************
Pour arreter le model utilise la clé q
*******************************************
si vous avez des questions n'hesiter pas de me contactez : ghrayric@gmail.com
